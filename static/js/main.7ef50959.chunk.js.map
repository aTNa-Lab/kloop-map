{"version":3,"sources":["Components/Map.js","App.js","serviceWorker.js","index.js"],"names":["offsets","memo","props","useState","width","height","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","colorScale","scaleSequential","domain","interpolator","interpolate","returnColor","name","returnCurrent","sum","current","data","map","d","data-tip","projection","projectionConfig","scale","center","minZoom","maxZoom","zoom","geography","geographies","geo","key","rsmKey","onMouseEnter","setTooltipContent","properties","onMouseLeave","fill","stroke","strokeWidth","style","default","outline","hover","pressed","centroid","geoCentroid","coordinates","y","fontSize","font","textAnchor","trueName","queryString","require","App","state","ready","content","setState","urlString","parse","location","search","decode","console","log","url","csv","then","extent","item","this","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ef50959.chunk.js","sourcesContent":["import React, {useState, memo, useLayoutEffect} from \"react\";\r\nimport { ComposableMap, Geographies, Geography, ZoomableGroup, Marker } from \"react-simple-maps\";\r\nimport {csv, scaleSequential, interpolate, extent} from \"d3\";\r\nimport { geoCentroid } from \"d3-geo\";\r\n// import * as d3Geo from \"d3-geo\"\r\n// const {geoPath, ...projections} = d3Geo\r\n\r\n\r\n// const geoUrl = \"https://raw.githubusercontent.com/aTNa-Lab/RepForTests/master/kg_districts_with_osh_bishkek.json\"\r\nconst geoUrl = \"https://raw.githubusercontent.com/aTNa-Lab/RepForTests/master/kg_map_osh_bishkek.json\"\r\nconst geoBishkek = \"https://raw.githubusercontent.com/aTNa-Lab/RepForTests/master/Bishkek_v2.json\"\r\nconst geoOsh = \"https://raw.githubusercontent.com/aTNa-Lab/RepForTests/master/Osh.json\"\r\n// const csvUrl = \"https://raw.githubusercontent.com/aTNa-Lab/RepForTests/master/kg_map_data.csv\"\r\n\r\nconst offsets = {\r\n  \"Аламудунский\": 25,\r\n  \"Московский\": 3,\r\n  \"Ысык- Атинкий\": 3,\r\n  \"Сокулукский\": -20,\r\n  \"Чуйский\": 10,\r\n  \"Панфиловский\": -35\r\n}\r\n\r\nconst Map = (props) => {\r\n\r\n\tconst [[width, height], setSize] = useState([0, 0]);\r\n\tuseLayoutEffect(() => {\r\n\t\tfunction updateSize() {\r\n\t\tsetSize([window.innerWidth+10, window.innerHeight-5]);\r\n\t\t}\r\n\t\twindow.addEventListener('resize', updateSize);\r\n\t\tupdateSize();\r\n\t\treturn () => window.removeEventListener('resize', updateSize);\r\n\t}, []);\r\n\r\n  const colorScale = scaleSequential().domain([0,10]).interpolator(interpolate(\"white\", \"orange\"));\r\n\r\n  const returnColor = (name) => {\r\n    let color = colorScale(returnCurrent(name).sum)\r\n    return color\r\n\t}\r\n\r\n  const returnCurrent = (name) => {\r\n    let current = \"\"\r\n    props.data.map(d => {\r\n      if (d.name === name) {\r\n        current = d\r\n      }\r\n    })\r\n    return current\r\n\t}\r\n  \r\n    // const proj = projections[\"geoEqualEarth\"]().rotate([-25, 0, 0]).scale(9000).translate([-5100, 7500])\r\n    return (\r\n        <>\r\n      {/* <ComposableMap projection={proj} width={state.width} height={state.height} > */}\r\n      <ComposableMap data-tip=\"\" projection=\"geoEqualEarth\" width={width} height={height} projectionConfig={{scale: props.scale}}>\r\n      {/* <ComposableMap height={353} > */}\r\n      {/* <ZoomableGroup zoom={25} maxZoom={200} minZoom={22} center={[74.5,41.2]} > */}\r\n      {/* <ZoomableGroup center={[74.5,41.2]} minZoom={0.5} zoom={2.5}> */}\r\n      <ZoomableGroup center={[74.5,41.2]} minZoom={1} maxZoom={1}  zoom={1}>\r\n      <Geographies geography={geoUrl}>\r\n        {({ geographies }) => (\r\n          <>\r\n            {geographies.map(geo => (\r\n              <Geography\r\n                key={geo.rsmKey} \r\n                geography={geo}\r\n                onMouseEnter={() => {\r\n                  props.setTooltipContent(returnCurrent(geo.properties.name));\r\n                }}\r\n                onMouseLeave={() => {\r\n                  props.setTooltipContent(\"\");\r\n                }}\r\n                fill={returnColor(geo.properties.name)}\r\n                stroke=\"#FFF\"\r\n                strokeWidth=\"0.01\"\r\n                style={{\r\n                  default: {outline: \"none\"},\r\n                  hover: {outline: \"none\"},\r\n                  pressed: {outline: \"none\"}\r\n                }}\r\n              />\r\n            ))}\r\n            {geographies.map(geo => {\r\n              const centroid = geoCentroid(geo);\r\n              return (\r\n                <g key={geo.rsmKey + \"-name\"}>\r\n                  <Marker coordinates={centroid} \r\n                  onMouseEnter={() => {\r\n                    props.setTooltipContent(returnCurrent(geo.properties.name));\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    props.setTooltipContent(\"\");\r\n                  }}\r\n                  >\r\n                    <text y={offsets[geo.properties.name]} fontSize={props.font} textAnchor=\"middle\">\r\n                      {returnCurrent(geo.properties.name).trueName}\r\n                    </text>\r\n                  </Marker>\r\n                </g>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </Geographies>\r\n      <Geographies geography={geoBishkek}>\r\n        {({ geographies }) => (\r\n          <>\r\n            {geographies.map(geo => (\r\n              <Geography\r\n                key={geo.rsmKey} \r\n                geography={geo} \r\n                fill={returnColor(\"Бишкек\")}\r\n\t\t\t\t\t\t\t\tonMouseEnter={() => {\r\n                  props.setTooltipContent(returnCurrent(\"Бишкек\"));\r\n                }}\r\n                onMouseLeave={() => {\r\n                  props.setTooltipContent(\"\");\r\n                }}\r\n                stroke=\"#FFF\"\r\n                strokeWidth=\"0.01\"\r\n                style={{\r\n                  default: {outline: \"none\"},\r\n                  hover: {outline: \"none\"},\r\n                  pressed: {outline: \"none\"}\r\n                }}\r\n              />\r\n            ))}\r\n            {geographies.map(geo => {\r\n              const centroid = geoCentroid(geo);\r\n              return (\r\n                <g key={geo.rsmKey + \"-name\"}>\r\n                  <Marker coordinates={centroid}\r\n                  onMouseEnter={() => {\r\n                    props.setTooltipContent(returnCurrent(\"Бишкек\"));\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    props.setTooltipContent(\"\");\r\n                  }}\r\n                  >\r\n                    <text fontSize={props.font} textAnchor=\"middle\">\r\n\t\t\t\t\t\t\t\t\t\t{returnCurrent(\"Бишкек\").trueName}\r\n                    </text>\r\n                  </Marker>\r\n                </g>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </Geographies>\r\n      <Geographies geography={geoOsh}>\r\n        {({ geographies }) => (\r\n          <>\r\n            {geographies.map(geo => (\r\n              <Geography\r\n                key={geo.rsmKey} \r\n                geography={geo} \r\n\t\t\t\t\t\t\t\tonMouseEnter={() => {\r\n                  props.setTooltipContent(returnCurrent(\"Ош\"));\r\n                }}\r\n                onMouseLeave={() => {\r\n                  props.setTooltipContent(\"\");\r\n                }}\r\n                fill={returnColor(\"Ош\")}\r\n                stroke=\"#FFF\"\r\n                strokeWidth=\"0.01\"\r\n                style={{\r\n                  default: {outline: \"none\"},\r\n                  hover: {outline: \"none\"},\r\n                  pressed: {outline: \"none\"}\r\n                }}\r\n              />\r\n            ))}\r\n            {geographies.map(geo => {\r\n              const centroid = geoCentroid(geo);\r\n              return (\r\n                <g key={geo.rsmKey + \"-name\"}>\r\n                  <Marker coordinates={centroid}\r\n                  onMouseEnter={() => {\r\n                    props.setTooltipContent(returnCurrent(\"Ош\"));\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    props.setTooltipContent(\"\");\r\n                  }}\r\n                  >\r\n                    <text fontSize={props.font} textAnchor=\"middle\">\r\n\t\t\t\t\t\t\t\t\t\t{returnCurrent(\"Ош\").trueName}\r\n                    </text>\r\n                  </Marker>\r\n                </g>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </Geographies>\r\n      </ZoomableGroup>\r\n      </ComposableMap>\r\n      </>\r\n)\r\n};\r\n\r\nexport default memo(Map)\r\n","import React, {Component, memo} from \"react\";\nimport {csv, extent} from \"d3\";\nimport ReactTooltip from \"react-tooltip\";\nimport Map from './Components/Map'\nimport \"./styles.css\";\n\nconst queryString = require('query-string');\n\nclass App extends Component {\n\n  state ={\n    data: {},\n    ready: false,\n    width: window.innerWidth,\n    height: window.innerHeight - 5,\n    content: '',\n    scale: 3000,\n    font: 4\n  }\n\n  componentDidMount() {\n    let urlString = queryString.parse(window.location.search, {decode: false})\n    console.log(urlString)\n    if (urlString.url) {\n      csv(urlString.url)\n      .then(d => {\n        this.setState({data: d, ready: true})\n        console.log(\"DATA\", d)\n        console.log(\"Min/Max\", extent(d.map(item => item.sum)))\n      })\n    }\n    if (urlString.scale) {\n      this.setState({scale: urlString.scale})\n    }\n    if (urlString.font) {\n      this.setState({font: urlString.font})\n    }\n  }\n\n  setTooltipContent = (current) => {\n    let content\n    if (current) {\n      content = `${current.name} — ${current.sum}`\n    }\n    else {\n      content = current\n    }\n    this.setState({content: content})\n  }\n  \n  render() {\n    return (\n      this.state.ready ? <div>\n        <Map data={this.state.data} setTooltipContent={this.setTooltipContent} scale={this.state.scale} font={this.state.font} />\n        <ReactTooltip>{this.state.content}</ReactTooltip>\n      </div> : null\n    )\n  }\n};\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}