{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["queryString","require","App","state","data","ready","width","window","innerWidth","height","innerHeight","updateDimensions","setState","colorScale","scaleSequential","domain","interpolator","interpolate","returnColor","geoProp","color","map","d","name","sum","returnCurrent","current","addEventListener","this","urlString","parse","location","search","decode","console","log","url","csv","then","extent","item","removeEventListener","projection","projectionConfig","scale","center","zoom","geography","geographies","geo","key","rsmKey","fill","properties","stroke","strokeWidth","style","default","outline","hover","pressed","centroid","geoCentroid","coordinates","fontSize","textAnchor","y","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"0NAKMA,EAAcC,EAAQ,IA4GbC,E,4MApGbC,MAAO,CACLC,KAAM,GACNC,OAAO,EACPC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,YAAc,G,EAqB/BC,iBAAmB,WACjB,EAAKC,SAAS,CAAEN,MAAOC,OAAOC,WAAYC,OAAQF,OAAOG,YAAc,K,EAGzEG,WAAaC,cAAkBC,OAAO,CAAC,IAAI,MAAOC,aAAaC,YAAY,QAAS,W,EAEpFC,YAAc,SAACC,GACb,IAAIC,EAAQ,GAMZ,OALA,EAAKjB,MAAMC,KAAKiB,KAAI,SAAAC,GACdA,EAAEC,OAASJ,EAAQI,OACrBH,EAAQ,EAAKP,WAAWS,EAAEE,SAGvBJ,G,EAGTK,cAAgB,SAACN,GACf,IAAIO,EAAU,GAMd,OALA,EAAKvB,MAAMC,KAAKiB,KAAI,SAAAC,GACdA,EAAEC,OAASJ,EAAQI,OACrBG,EAAUJ,MAGPI,G,kEAzCY,IAAD,OAClBnB,OAAOoB,iBAAiB,SAAUC,KAAKjB,kBAEvC,IAAIkB,EAAY7B,EAAY8B,MAAMvB,OAAOwB,SAASC,OAAQ,CAACC,QAAQ,IACnEC,QAAQC,IAAIN,GACRA,EAAUO,KACZC,YAAIR,EAAUO,KACbE,MAAK,SAAAhB,GACJ,EAAKV,SAAS,CAACR,KAAMkB,EAAGjB,OAAO,IAC/B6B,QAAQC,IAAI,UAAWI,YAAOjB,EAAED,KAAI,SAAAmB,GAAI,OAAIA,EAAKhB,c,6CAMrDjB,OAAOkC,oBAAoB,SAAUb,KAAKjB,oB,+BA6BlC,IAAD,OAEP,OADAuB,QAAQC,IAAIP,KAAKzB,OAEjByB,KAAKzB,MAAME,MAAQ,6BACjB,kBAAC,gBAAD,CAAeqC,WAAW,gBAAgBpC,MAAOsB,KAAKzB,MAAMG,MAAOG,OAAQmB,KAAKzB,MAAMM,OAAQkC,iBAAkB,CAACC,MAAO,MAGxH,kBAAC,gBAAD,CAAeC,OAAQ,CAAC,KAAK,MAAOC,KAAM,KAC1C,kBAAC,cAAD,CAAaC,UAhEJ,mFAiEN,gBAAGC,EAAH,EAAGA,YAAH,OACC,oCACGA,EAAY3B,KAAI,SAAA4B,GAAG,OAClB,kBAAC,YAAD,CACEC,IAAKD,EAAIE,OACTJ,UAAWE,EACXG,KAAM,EAAKlC,YAAY+B,EAAII,YAC3BC,OAAO,OACPC,YAAY,OACZC,MAAO,CACLC,QAAS,CAACC,QAAS,QACnBC,MAAO,CAACD,QAAS,QACjBE,QAAS,CAACF,QAAS,cAIxBV,EAAY3B,KAAI,SAAA4B,GACf,IAAMY,EAAWC,YAAYb,GACvBvB,EAAU,EAAKD,cAAcwB,EAAII,YACvC,OACE,uBAAGH,IAAKD,EAAIE,OAAS,SACnB,kBAAC,SAAD,CAAQY,YAAaF,GACnB,0BAAMG,SAAU,EAAGC,WAAW,UAC3BhB,EAAII,WAAW9B,MAElB,0BAAM2C,EAAG,EAAGF,SAAU,EAAGC,WAAW,UACjCvC,EAAQF,iBAWlB,S,GAnGK2C,aCCEC,QACW,cAA7B7D,OAAOwB,SAASsC,UAEe,UAA7B9D,OAAOwB,SAASsC,UAEhB9D,OAAOwB,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcxE,MACrBiC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,a","file":"static/js/main.a0d60694.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup, Marker } from \"react-simple-maps\";\nimport {csv, scaleSequential, interpolate, extent} from \"d3\";\nimport { geoCentroid } from \"d3-geo\";\n\nconst queryString = require('query-string');\n\n\nconst geoUrl = \"https://raw.githubusercontent.com/aTNa-Lab/RepForTests/master/kg_districs.json\"\n// const csvUrl = \"https://raw.githubusercontent.com/aTNa-Lab/RepForTests/master/kg_map_data.csv\"\n\nclass App extends Component {\n\n  state ={\n    data: {},\n    ready: false,\n    width: window.innerWidth,\n    height: window.innerHeight - 5\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.updateDimensions);\n\n    let urlString = queryString.parse(window.location.search, {decode: false})\n    console.log(urlString)\n    if (urlString.url) {\n      csv(urlString.url)\n      .then(d => {\n        this.setState({data: d, ready: true})\n        console.log(\"Min/Max\", extent(d.map(item => item.sum)))\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n\n  updateDimensions = () => {\n    this.setState({ width: window.innerWidth, height: window.innerHeight - 5 });\n  };\n\n  colorScale = scaleSequential().domain([100,1000]).interpolator(interpolate(\"white\", \"orange\"));\n\n  returnColor = (geoProp) => {\n    let color = \"\"\n    this.state.data.map(d => {\n      if (d.name === geoProp.name) {\n        color = this.colorScale(d.sum)\n      }\n    })\n    return color\n  }\n\n  returnCurrent = (geoProp) => {\n    let current = \"\"\n    this.state.data.map(d => {\n      if (d.name === geoProp.name) {\n        current = d\n      }\n    })\n    return current\n  }\n  \n  render() {\n    console.log(this.state)\n    return (\n    this.state.ready ? <div>\n      <ComposableMap projection=\"geoEqualEarth\" width={this.state.width} height={this.state.height} projectionConfig={{scale: 4000}}>\n      {/* <ComposableMap height={353} > */}\n      {/* <ZoomableGroup zoom={25} maxZoom={200} minZoom={22} center={[74.5,41.2]} > */}\n      <ZoomableGroup center={[74.5,41.2]} zoom={2.3}>\n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          <>\n            {geographies.map(geo => (\n              <Geography\n                key={geo.rsmKey} \n                geography={geo} \n                fill={this.returnColor(geo.properties)}\n                stroke=\"#FFF\"\n                strokeWidth=\"0.01\"\n                style={{\n                  default: {outline: \"none\"},\n                  hover: {outline: \"none\"},\n                  pressed: {outline: \"none\"}\n                }}\n              />\n            ))}\n            {geographies.map(geo => {\n              const centroid = geoCentroid(geo);\n              const current = this.returnCurrent(geo.properties)\n              return (\n                <g key={geo.rsmKey + \"-name\"}>\n                  <Marker coordinates={centroid}>\n                    <text fontSize={4} textAnchor=\"middle\">\n                      {geo.properties.name}\n                    </text>\n                    <text y={6} fontSize={4} textAnchor=\"middle\">\n                      {current.sum}\n                    </text>\n                  </Marker>\n                </g>\n              );\n            })}\n          </>\n        )}\n      </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div> : null\n)}};\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}